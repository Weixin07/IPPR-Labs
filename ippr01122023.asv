%{
%% Feature Extraction using connected components for recognition
% Read and display an RGB image
image = imread("standard_test_images\coins_1.jpg");
imshow(image);
title('Original Image');

% Convert the image to grayscale
graylmage = rgb2gray(image); figure;
imshow(graylmage);
title('Grayscale Image');

% Apply image smoothing using a Gaussian filter 
smoothedImage = imgaussfilt(graylmage, 3); figure;
imshow(smoothedImage);
title('Smoothed Image');

% Perform edge detection using the Canny algorithm 
edgelmage = edge(smoothedImage, 'Canny');
figure;
imshow(edgelmage);
title('Edges');

% Perform basic image segmentation using thresholding threshold 
graythresh(smoothedImage);
binaryImage = imbinarize(smoothedImage, threshold); figure;
imshow(binarylmage);
title('Binary Image');

% Perform connected component analysis
labeledImage = bwlabel(binarylmage);
numRegions = max(labeledImage(:));
fprintf('Number of regions: %d\n', numRegions);


% Display each region with a different color
coloredLabels = label2rgb(labeledImage, 'hsv', 'k', 'shuffle');
figure;
imshow(coloredLabels);
title('Connected Components');

% Extract properties of each region
regionProps = regionprops(labeledImage, 'Area', 'BoundingBox', 'Centroid');

% Display the properties of each region
for i = 1:numRegions
fprintf('Region %d:\n', i);
fprintf('Area: %d\n', regionProps(i).Area);
fprintf('Bounding Box: %s\n', mat2str(regionProps(i).BoundingBox));
fprintf('Centroid: %s\n', mat2str(regionProps(i).Centroid));
fprintf('\n');
end

%% Shape Description: Reducing the size of the object to its “skeleton”. The concept of object skeleton is frequently used in image analysis applications, e.g. optical character recognition, edge tracking etc. Skeleton of an object can be obtained by means of medial axis transformation.
% Load the original image
BW1 = imread("standard_test_images\circles.png");

% Convert the image to grayscale if it is not already
if size(BW1, 3) == 3
    BW1 = rgb2gray(BW1);
end

% Convert the grayscale image to binary
BW1 = imbinarize(BW1);

% Display the original binary image
figure, imshow(BW1);

% Apply the 'remove' morphological operation
BW2 = bwmorph(BW1,'remove');

% Apply the 'skeletonize' morphological operation indefinitely
BW3 = bwmorph(BW1,'skel', Inf);

% Display the results of the morphological operations
figure, imshow(BW2);
figure, imshow(BW3);


%% Calculate the gray-level co-occurrence matrix (GLCM) and return the scaled image used in the calculation. By specifying empty brackets for the GrayLimits parameter, the example uses the minimum and maximum grayscale vales in the input image as limits.
I = [ 1 1 5 6 8 8; 2 3 5 7 0 2; 0 2 3 5 6 7];

[glcm, SI] = graycomatrix(I,'NumLevels',9,'GrayLimits',[]);

glcm = [0 1 2 3;1 1 2 3;1 0 2 0;0 0 0 3];

% Calculate statistical properties of the GLCM. 
stats = graycoprops(glcm); 
%}

%% Recognition
% Read Image
I = imread('standard_test_images\');
imshow(I)

%% Convert to grayscale image
gray = rgb2gray(|);
imshow(Igray)

%% Convert to binary image
bw = im2bw(Igray,graythresh(Igray));
imshow(Ibw)

%% Edge detection
edge = edge(uint8(Ibw));
imshow(ledge)

%% Morphology

De*AONOD

G2erroe

rPOrROO®
% * *Image Dilation*

se = strel('square',2);

edge2 = imdilate(ledge, se);
imshow(ledge2);

% * *Image Filling*

fill= imfill(ledge2,'holes');
imshow/i[fill)

%% Blobs analysis

llabel num] = bwlabel (Ifill);
disp(num);

props = regionprops(Ilabel);
box = [Ilprops.BoundingBox];
box = reshape(Ibox,[4 50]);
imshow(I)

%% Plot the Object Location

hold on;

for cnt = 1:50
rectangle('position',Ibox(:,cnt),'edgecolor','r');

end
